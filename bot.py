import os
import csv
import random
import asyncio
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
games: Dict[str, dict] = {}
all_questions: Dict[str, List[dict]] = {}
all_prizes: Dict[str, List[str]] = {}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–∏—Ç–∞–Ω—å
QUESTION_CATEGORIES = {
    'intimate': {
        'name': 'üî• –Ü–Ω—Ç–∏–º–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è',
        'file': 'questions.csv',
        'prize_file': 'winner_prizes_intim.csv'
    },
    'life': {
        'name': 'üåü –ü—Ä–æ –∂–∏—Ç—Ç—è',
        'file': 'life_questions.csv',
        'prize_file': 'winner_prizes_life.csv'
    },
    'cringe': {
        'name': 'üòÖ –¢—Ä–æ—Ö–∏ –∫—Ä—ñ–Ω–∂–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è',
        'file': 'cringe_questions.csv',
        'prize_file': 'winner_prizes_krin.csv'
    }
}

# –Ü–º–µ–Ω–∞ –æ—Å–æ–±–ª–∏–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ!)
SPECIAL_USERNAMES = {"apofickk"} # <-- –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ —ñ–º–µ–Ω–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª—É @

class GameStates:
    WAITING_FOR_PLAYERS = "waiting"
    IN_PROGRESS = "playing"
    VOTING = "voting"
    FINISHED = "finished"

def load_questions():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑ —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    global all_questions
    total_loaded = 0
    for category_key, details in QUESTION_CATEGORIES.items():
        try:
            with open(details['file'], 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                category_questions = list(reader)
                all_questions[category_key] = category_questions
                print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(category_questions)} –ø–∏—Ç–∞–Ω—å –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{details['name']}' ({details['file']})")
                total_loaded += len(category_questions)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {details['file']} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            all_questions[category_key] = []
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ {details['file']}: {e}")
            all_questions[category_key] = []
    print(f"üìä –í—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {total_loaded} –ø–∏—Ç–∞–Ω—å.")


def generate_game_code() -> str:
    """–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –≥—Ä–∏"""
    return ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=6))


def load_prizes():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∑–∏ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –∑ —Ñ–∞–π–ª—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    global all_prizes
    print("\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∑—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤...")
    for category_key, details in QUESTION_CATEGORIES.items():
        prize_file = details.get('prize_file')
        if not prize_file:
            continue
        try:
            with open(prize_file, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –∫–æ–ª–æ–Ω–∫–∞ –∑ –ø—Ä–∏–∑–æ–º –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è 'prize'
                prizes = [row['prize'] for row in reader]
                all_prizes[category_key] = prizes
                print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(prizes)} –ø—Ä–∏–∑—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{details['name']}'")
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –ø—Ä–∏–∑—ñ–≤ {prize_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            all_prizes[category_key] = []
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∑—ñ–≤ –∑ {prize_file}: {e}")
            all_prizes[category_key] = []


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üéÆ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É", callback_data='create_game')],
        [InlineKeyboardButton("üö™ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏", callback_data='join_game')],
        [InlineKeyboardButton("‚ÑπÔ∏è –Ø–∫ –≥—Ä–∞—Ç–∏?", callback_data='rules')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üî• *Intimate Questions Game* üî•\n\n"
        "–ì—Ä–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ–π, —è–∫—ñ —Ö–æ—á—É—Ç—å –∫—Ä–∞—â–µ –ø—ñ–∑–Ω–∞—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!\n\n"
        "üéØ *–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:*\n"
        "‚Ä¢ –û–¥–∏–Ω —Å—Ç–≤–æ—Ä—é—î –∫—ñ–º–Ω–∞—Ç—É –∑ –∫–æ–¥–æ–º\n"
        "‚Ä¢ –Ü–Ω—à—ñ –ø—Ä–∏—î–¥–Ω—É—é—Ç—å—Å—è –∑–∞ –∫–æ–¥–æ–º\n"
        "‚Ä¢ –ë–æ—Ç –∑–∞–¥–∞—î –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ–º –æ–¥–Ω–æ—á–∞—Å–Ω–æ\n"
        "‚Ä¢ –ü—ñ—Å–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É—î—Ç–µ –æ–¥–∏–Ω –∑–∞ –æ–¥–Ω–æ–≥–æ\n"
        "‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∑–∞ –±–∞–ª–∞–º–∏!\n\n"
        "–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def create_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏"""
    query = update.callback_query
    await query.answer()

    keyboard = []
    for key, details in QUESTION_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(details['name'], callback_data=f'create_cat_{key}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚ú® *–í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≥—Ä–∏*\n\n"
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∏—Ç–∞–Ω—å –¥–ª—è –≤–∞—à–æ—ó –Ω–æ–≤–æ—ó –≥—Ä–∏:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def create_game_with_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É –∑ –æ–±—Ä–∞–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    query = update.callback_query
    await query.answer()

    category_key = query.data.split('_')[-1]
    if category_key not in QUESTION_CATEGORIES:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.")
        return

    game_code = generate_game_code()
    user_id = query.from_user.id
    user_name = query.from_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å"

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É
    games[game_code] = {
        'code': game_code,
        'creator_id': user_id,
        'state': GameStates.WAITING_FOR_PLAYERS,
        'players': [{'id': user_id, 'name': user_name}],
        'scores': {user_id: 0},
        'category': category_key,
        'current_question': None,
        'used_questions': [],
        'votes': {},
        'round_number': 0
    }

    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data=f'start_game_{game_code}')],
        [InlineKeyboardButton("üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data=f'show_players_{game_code}')],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É", callback_data=f'cancel_game_{game_code}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    category_name = QUESTION_CATEGORIES[category_key]['name']
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    created_text = (
        f"üéÆ *–ì—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!*\n\n"
        f"üîë *–ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏:* `{game_code}`\n"
        f"üìö *–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:* {category_name}\n\n"
        f"üë§ *–°—Ç–≤–æ—Ä–∏–≤:* {user_name}\n"
        f"üë• *–ì—Ä–∞–≤—Ü—ñ–≤:* 1\n\n"
        f"üìã –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –∫–æ–¥–æ–º –∑ –¥—Ä—É–∑—è–º–∏!\n"
        f"–ú—ñ–Ω—ñ–º—É–º –ø–æ—Ç—Ä—ñ–±–Ω–æ 2 –≥—Ä–∞–≤—Ü—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏."
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–≤–æ—Ä–µ—Ü—å —É —Å–ø–∏—Å–∫—É –æ—Å–æ–±–ª–∏–≤–∏—Ö
    if user_id in SPECIAL_USER_IDS:
        special_message = "\n\n‚ú® *–ë–∞—á—É, –≥–æ–ª–æ–≤–Ω–∏–π –Ω–∞ –º—ñ—Å—Ü—ñ!* ‚ú®\n–ì–∞—Ä–Ω–æ—ó –≥—Ä–∏, –±–æ—Å!"
        created_text += special_message

    await query.edit_message_text(
        created_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

    
async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏"""
    query = update.callback_query
    await query.answer()
    
    # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üö™ *–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏*\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏ (6 —Å–∏–º–≤–æ–ª—ñ–≤):",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–¥—É
    context.user_data['waiting_for_code'] = True

async def handle_join_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏"""
    if not context.user_data.get('waiting_for_code'):
        return
    
    code = update.message.text.strip().upper()
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name or "–ì—Ä–∞–≤–µ—Ü—å"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î –≥—Ä–∞
    if code not in games:
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ì—Ä–∞ –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_code'] = False
        return
    
    game = games[code]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ –≥—Ä—ñ
    if any(player['id'] == user_id for player in game['players']):
        keyboard = [
            [InlineKeyboardButton("üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data=f'show_players_{code}')],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)


    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≥—Ä–∞–≤–µ—Ü—å —É —Å–ø–∏—Å–∫—É –æ—Å–æ–±–ª–∏–≤–∏—Ö
    if user_id in SPECIAL_USER_IDS:
        special_message = "\n\n‚ú® *–û, –±–∞—á—É —Ç—É—Ç —Å–≤–æ—ó –ª—é–¥–∏!* ‚ú®\n–í–¥–∞–ª–æ—ó –≥—Ä–∏!"
        join_text += special_message



        
        await update.message.reply_text(
            f"‚ö†Ô∏è –í–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏ {code}!",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_code'] = False
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –≥—Ä–∏
    if game['state'] != GameStates.WAITING_FOR_PLAYERS:
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –¶—è –≥—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—è –∞–±–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è!",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_code'] = False
        return
    
    # –î–æ–¥–∞—Ç–∏ –≥—Ä–∞–≤—Ü—è
    game['players'].append({'id': user_id, 'name': user_name})
    game['scores'][user_id] = 0
    
    context.user_data['waiting_for_code'] = False
    
    keyboard = [
        [InlineKeyboardButton("üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤", callback_data=f'show_players_{code}')],
        [InlineKeyboardButton("üîÑ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ *–£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏!*\n\n"
        f"üîë *–ö–æ–¥:* `{code}`\n"
        f"üë• *–ì—Ä–∞–≤—Ü—ñ–≤:* {len(game['players'])}\n\n"
        f"–û—á—ñ–∫—É–π—Ç–µ –ø–æ–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á –ø–æ—á–Ω–µ –≥—Ä—É.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤"""
    query = update.callback_query
    await query.answer()
    
    game_code = query.data.split('_')[-1]
    
    if game_code not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_code]
    players_list = "\n".join([f"‚Ä¢ {player['name']}" for player in game['players']])
    
    keyboard = []
    if game['state'] == GameStates.WAITING_FOR_PLAYERS:
        if query.from_user.id == game['creator_id'] and len(game['players']) >= 2:
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data=f'start_game_{game_code}')])
        keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f'show_players_{game_code}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üë• *–ì—Ä–∞–≤—Ü—ñ –≤ –∫—ñ–º–Ω–∞—Ç—ñ {game_code}:*\n\n"
        f"{players_list}\n\n"
        f"üìä *–í—Å—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ–≤:* {len(game['players'])}",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def start_game_round(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–∏ –≥—Ä—É –∞–±–æ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥"""
    query = update.callback_query
    await query.answer()
    
    game_code = query.data.split('_')[-1]
    
    if game_code not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_code]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∞
    if query.from_user.id != game['creator_id']:
        await query.answer("‚ùå –¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á –º–æ–∂–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–æ—é!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤
    if len(game['players']) < 2:
        await query.answer("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ!", show_alert=True)
        return
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category_key = game['category']
    question_pool = all_questions.get(category_key, [])
    
    available_questions = [q for q in question_pool if q['id'] not in game['used_questions']]
    
    if not available_questions:
        # –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è
        await finish_game(update, context, game_code)
        return
    
    current_question = random.choice(available_questions)
    game['used_questions'].append(current_question['id'])
    game['current_question'] = current_question
    game['state'] = GameStates.IN_PROGRESS
    game['round_number'] += 1
    game['votes'] = {}
    
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º
    question_text = (
        f"üéØ *–†–∞—É–Ω–¥ {game['round_number']}*\n\n"
        f"üìù *–ü–∏—Ç–∞–Ω–Ω—è:*\n{current_question['question']}\n\n"
        f"üí° *–ü—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è:*\n{current_question['guidance']}\n\n"
        f"‚è∞ –û–±–≥–æ–≤–æ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–∏–π –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏' –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ!"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–∏–π –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏", callback_data=f'ready_vote_{game_code}')],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'skip_question_{game_code}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º
    for player in game['players']:
        try:
            await context.bot.send_message(
                chat_id=player['id'],
                text=question_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {player['name']}: {e}")

async def ready_to_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì—Ä–∞–≤–µ—Ü—å –≥–æ—Ç–æ–≤–∏–π –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    game_code = query.data.split('_')[-1]
    user_id = query.from_user.id
    
    if game_code not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_code]
    
    if game['state'] != GameStates.IN_PROGRESS:
        await query.answer("‚ùå –ó–∞—Ä–∞–∑ –Ω–µ —á–∞—Å –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤ –≥—Ä—ñ
    if not any(player['id'] == user_id for player in game['players']):
        await query.answer("‚ùå –í–∏ –Ω–µ –≤ —Ü—ñ–π –≥—Ä—ñ!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è (–≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –∫—Ä—ñ–º —Å–µ–±–µ)
    keyboard = []
    for player in game['players']:
        if player['id'] != user_id:  # –ù–µ –º–æ–∂–Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Å–µ–±–µ
            keyboard.append([InlineKeyboardButton(
                f"üó≥Ô∏è {player['name']}", 
                callback_data=f'vote_{game_code}_{player["id"]}'
            )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üó≥Ô∏è *–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è*\n\n"
        f"–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä–∞–≤—Ü—è, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–¥–∞—Ç–∏ —Å–≤—ñ–π –±–∞–ª –∑–∞ —Ü–µ–π —Ä–∞—É–Ω–¥:\n\n"
        f"üí° *–ü–∞–º'—è—Ç–∞–π—Ç–µ:* –ù–µ –º–æ–∂–Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Å–µ–±–µ!",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def vote_for_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –≥—Ä–∞–≤—Ü—è"""
    query = update.callback_query
    await query.answer()
    
    data_parts = query.data.split('_')
    game_code = data_parts[1]
    voted_for_id = int(data_parts[2])
    voter_id = query.from_user.id
    
    if game_code not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_code]
    
    # –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å
    game['votes'][voter_id] = voted_for_id
    
    # –ó–Ω–∞–π—Ç–∏ —ñ–º'—è –≥—Ä–∞–≤—Ü—è –∑–∞ —è–∫–æ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏
    voted_player_name = next(
        (player['name'] for player in game['players'] if player['id'] == voted_for_id),
        "–ù–µ–≤—ñ–¥–æ–º–∏–π –≥—Ä–∞–≤–µ—Ü—å"
    )
    
    await query.edit_message_text(
        f"‚úÖ *–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!*\n\n"
        f"–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞: *{voted_player_name}*\n\n"
        f"–û—á—ñ–∫—É–π—Ç–µ –ø–æ–∫–∏ –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É—é—Ç—å..."
    )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—Å—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏
    if len(game['votes']) == len(game['players']):
        await process_round_results(context, game_code)

async def process_round_results(context: ContextTypes.DEFAULT_TYPE, game_code: str):
    """–û–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–∞—É–Ω–¥—É"""
    game = games[game_code]
    
    # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏
    round_scores = {}
    for player in game['players']:
        round_scores[player['id']] = 0
    
    for voter_id, voted_for_id in game['votes'].items():
        if voted_for_id in round_scores:
            round_scores[voted_for_id] += 1
    
    # –î–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    for player_id, points in round_scores.items():
        game['scores'][player_id] += points
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–∞—É–Ω–¥—É (–ë–ï–ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)
    completion_text = f"‚úÖ *–†–∞—É–Ω–¥ {game['round_number']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"
    completion_text += f"–í—Å—ñ –≥—Ä–∞–≤—Ü—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏. –ì–æ—Ç–æ–≤—ñ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è?"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'start_game_{game_code}')],
        [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É", callback_data=f'finish_game_{game_code}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º
    for player in game['players']:
        try:
            await context.bot.send_message(
                chat_id=player['id'],
                text=completion_text,
                parse_mode='Markdown',
                reply_markup=reply_markup if player['id'] == game['creator_id'] else None
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {player['id']}: {e}")

async def skip_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    game_code = query.data.split('_')[-1]
    
    if game_code not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_code]
    
    # –¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á –º–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏
    if query.from_user.id != game['creator_id']:
        await query.answer("‚ùå –¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á –º–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è!", show_alert=True)
        return
    
    # –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥
    await start_game_round(update, context)

async def finish_game(update: Update, context: ContextTypes.DEFAULT_TYPE, game_code: str = None):
    """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –ø—Ä–∏–∑–æ–º –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—è"""
    if not game_code:
        query = update.callback_query
        await query.answer()
        game_code = query.data.split('_')[-1]
    
    if game_code not in games:
        if hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_code]
    game['state'] = GameStates.FINISHED
    
    # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    final_results = sorted(game['scores'].items(), key=lambda x: x[1], reverse=True)
    
    results_text = f"üéâ *–§–Ü–ù–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–†–ò {game_code}*\n\n"
    winner_name = "–ù—ñ—Ö—Ç–æ"
    
    if final_results:
        winner_id = final_results[0][0]
        winner_name = next((player['name'] for player in game['players'] if player['id'] == winner_id), "–ù–µ–≤—ñ–¥–æ–º–∏–π")

    for i, (player_id, score) in enumerate(final_results):
        player_name = next(player['name'] for player in game['players'] if player['id'] == player_id)
        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üèÖ"
        results_text += f"{medal} {i+1}. {player_name}: {score} –±–∞–ª—ñ–≤\n"
    
    results_text += f"\nüéØ –í—Å—å–æ–≥–æ –±—É–ª–æ {game['round_number']} —Ä–∞—É–Ω–¥—ñ–≤."

    # --- –õ–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏–∑—É ---
    category_key = game.get('category')
    prizes_for_category = all_prizes.get(category_key, [])
    
    if prizes_for_category:
        random_prize = random.choice(prizes_for_category)
        prize_text = (
            f"\n\nüèÜ *–ü—Ä–∏–∑ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—è, {winner_name}!* üèÜ\n\n"
            f"_{random_prize}_"
        )
        results_text += prize_text
    # --- –ö—ñ–Ω–µ—Ü—å –ª–æ–≥—ñ–∫–∏ –ø—Ä–∏–∑—É ---

    results_text += f"\n\nüéÆ –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É!"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤–∞ –≥—Ä–∞", callback_data='create_game')],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ–º
    for player in game['players']:
        try:
            await context.bot.send_message(
                chat_id=player['id'],
                text=results_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥—Ä–∞–≤—Ü—é {player['id']}: {e}")
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É –∑ –ø–∞–º'—è—Ç—ñ
    if game_code in games:
        del games[game_code]

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏"""
    query = update.callback_query
    await query.answer()
    
    rules_text = (
        "üìñ *–ü–†–ê–í–ò–õ–ê –ì–†–ò*\n\n"
        "üéØ *–ú–µ—Ç–∞:* –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤ –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–∫–∞–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n\n"
        "üéÆ *–Ø–∫ –≥—Ä–∞—Ç–∏:*\n"
        "1. –°—Ç–≤–æ—Ä—ñ—Ç—å –∫—ñ–º–Ω–∞—Ç—É, –æ–±—Ä–∞–≤—à–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –∑–∞ –∫–æ–¥–æ–º\n"
        "2. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ\n"
        "3. –ë–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—î –ø–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ–º –æ–¥–Ω–æ—á–∞—Å–Ω–æ\n"
        "4. –û–±–≥–æ–≤–æ—Ä—é–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ä–∞–∑–æ–º\n"
        "5. –ü–æ—Ç—ñ–º –∫–æ–∂–µ–Ω –≥–æ–ª–æ—Å—É—î –∑–∞ –Ω–∞–π–∫—Ä–∞—â—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n"
        "6. –ù–µ –º–æ–∂–Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Å–µ–±–µ!\n"
        "7. –ì—Ä–∞–≤–µ—Ü—å –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±–∞–ª—ñ–≤ –ø–µ—Ä–µ–º–∞–≥–∞—î\n\n"
        "üí° *–ü–æ—Ä–∞–¥–∏:*\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –≤—ñ–¥–≤–µ—Ä—Ç–∏–º–∏ —Ç–∞ —â–∏—Ä–∏–º–∏\n"
        "‚Ä¢ –°–ª—É—Ö–∞–π—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ\n"
        "‚Ä¢ –ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è –¥—ñ–ª–∏—Ç–∏—Å—è –¥—É–º–∫–∞–º–∏\n"
        "‚Ä¢ –ü–∞–º'—è—Ç–∞–π—Ç–µ: —Ü–µ –≥—Ä–∞ –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        rules_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É", callback_data='create_game')],
        [InlineKeyboardButton("üö™ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏", callback_data='join_game')],
        [InlineKeyboardButton("‚ÑπÔ∏è –Ø–∫ –≥—Ä–∞—Ç–∏?", callback_data='rules')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üî• *Intimate Questions Game* üî•\n\n"
        "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def cancel_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É"""
    query = update.callback_query
    await query.answer()
    
    game_code = query.data.split('_')[-1]
    
    if game_code in games:
        game = games[game_code]
        if query.from_user.id == game['creator_id']:
            del games[game_code]
            
            # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùå –ì—Ä—É {game_code} —Å–∫–∞—Å–æ–≤–∞–Ω–æ!",
                reply_markup=reply_markup
            )
        else:
            await query.answer("‚ùå –¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É!", show_alert=True)
    else:
        # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≥—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
        keyboard = [
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!",
            reply_markup=reply_markup
        )

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è
    load_questions()
    load_prizes()
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ environment
    token = os.getenv('BOT_TOKEN')
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(token).build()
    
    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ callback_query
    application.add_handler(CallbackQueryHandler(create_game, pattern='create_game'))
    application.add_handler(CallbackQueryHandler(create_game_with_category, pattern=r'create_cat_\w+'))
    application.add_handler(CallbackQueryHandler(join_game, pattern='join_game'))
    application.add_handler(CallbackQueryHandler(show_players, pattern=r'show_players_\w+'))
    application.add_handler(CallbackQueryHandler(start_game_round, pattern=r'start_game_\w+'))
    application.add_handler(CallbackQueryHandler(ready_to_vote, pattern=r'ready_vote_\w+'))
    application.add_handler(CallbackQueryHandler(vote_for_player, pattern=r'vote_\w+_\d+'))
    application.add_handler(CallbackQueryHandler(skip_question, pattern=r'skip_question_\w+'))
    application.add_handler(CallbackQueryHandler(finish_game, pattern=r'finish_game_\w+'))
    application.add_handler(CallbackQueryHandler(show_rules, pattern='rules'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='back_to_menu'))
    application.add_handler(CallbackQueryHandler(cancel_game, pattern=r'cancel_game_\w+'))
    
    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ–¥—ñ–≤ –∫—ñ–º–Ω–∞—Ç
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_join_code))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    # print(f"üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(questions)} –ø–∏—Ç–∞–Ω—å")
    print("üí¨ –ù–∞–¥—ñ—à–ª—ñ—Ç—å /start –±–æ—Ç—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
