import os
import csv
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–∏—Ç–∞–Ω—å
QUESTION_CATEGORIES = {
    'intimate': {
        'name': 'üî• –Ü–Ω—Ç–∏–º–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è',
        'file': 'questions.csv',
        'description': '–ì–ª–∏–±–æ–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —ñ–Ω—Ç–∏–º–Ω—ñ—Å—Ç—å —Ç–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å'
    },
    'life': {
        'name': 'üåü –ü—Ä–æ –∂–∏—Ç—Ç—è',
        'file': 'life_questions.csv',
        'description': '–§—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —â–∞—Å—Ç—è, –º–æ—Ä–∞–ª—å —Ç–∞ —Å–µ–Ω—Å –∂–∏—Ç—Ç—è'
    },
    'cringe': {
        'name': 'üòÖ –¢—Ä–æ—Ö–∏ –∫—Ä—ñ–Ω–∂–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è',
        'file': 'cringe_questions.csv',
        'description': '–ê–±—Å—É—Ä–¥–Ω—ñ —Ç–∞ –∫—É–º–µ–¥–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –¥–ª—è —Å–º—ñ—Ö—É'
    }
}

class QuestionManager:
    def __init__(self):
        self.questions_cache = {}
    
    def load_questions(self, category):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        if category in self.questions_cache:
            return self.questions_cache[category]
        
        filename = QUESTION_CATEGORIES[category]['file']
        questions = []
        
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                questions = [dict(row) for row in reader]
                self.questions_cache[category] = questions
                print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(questions)} –ø–∏—Ç–∞–Ω—å –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' ({filename})")
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î.")
            print(f"–ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")
            print(f"–§–∞–π–ª–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {os.listdir('.')}")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filename}: {e}")
        
        return questions
    
    def get_random_question(self, category, used_questions=None):
        """–û—Ç—Ä–∏–º—É—î –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
        questions = self.load_questions(category)
        if not questions:
            return None
        
        if used_questions is None:
            used_questions = set()
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
        available = [q for q in questions if q['id'] not in used_questions]
        
        if not available:
            # –Ø–∫—â–æ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ, —Å–∫–∏–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫
            available = questions
            used_questions.clear()
        
        return random.choice(available)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∏—Ç–∞–Ω—å
question_manager = QuestionManager()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —ñ–≥–æ—Ä
games = {}

class Game:
    def __init__(self, game_id, category, creator_id):
        self.game_id = game_id
        self.category = category
        self.creator_id = creator_id
        self.players = {creator_id}
        self.used_questions = set()
        self.current_question = None
        self.is_active = False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –¥—ñ–π"""
    keyboard = [
        [InlineKeyboardButton("üéØ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton("üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏", callback_data="join_game")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üéÆ **–Ü–Ω—Ç–∏–º–Ω—ñ –ü–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ü–∞—Ä**

–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –ø–∞—Ä–∞–º –∫—Ä–∞—â–µ –ø—ñ–∑–Ω–∞—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ —á–µ—Ä–µ–∑ —Ü—ñ–∫–∞–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.

–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?
"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ callback query —á–∏ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def create_game_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = []
    for cat_id, cat_info in QUESTION_CATEGORIES.items():
        keyboard.append([
            InlineKeyboardButton(
                cat_info['name'], 
                callback_data=f"category_{cat_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üéØ **–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∏—Ç–∞–Ω—å:**

üî• **–Ü–Ω—Ç–∏–º–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è** - –≥–ª–∏–±–æ–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —ñ–Ω—Ç–∏–º–Ω—ñ—Å—Ç—å
üåü **–ü—Ä–æ –∂–∏—Ç—Ç—è** - —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —â–∞—Å—Ç—è, –º–æ—Ä–∞–ª—å —Ç–∞ —Å–µ–Ω—Å –∂–∏—Ç—Ç—è
üòÖ **–¢—Ä–æ—Ö–∏ –∫—Ä—ñ–Ω–∂–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è** - –∞–±—Å—É—Ä–¥–Ω—ñ —Ç–∞ –∫—É–º–µ–¥–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –¥–ª—è —Å–º—ñ—Ö—É

–ö–æ–∂–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –º—ñ—Å—Ç–∏—Ç—å 100 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ—ó–≤!
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def create_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ callback_data
    category = query.data.replace("category_", "")
    
    if category not in QUESTION_CATEGORIES:
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è!")
        return
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –≥—Ä–∏
    game_id = str(random.randint(1000, 9999))
    while game_id in games:
        game_id = str(random.randint(1000, 9999))
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É
    creator_id = query.from_user.id
    games[game_id] = Game(game_id, category, creator_id)
    
    category_info = QUESTION_CATEGORIES[category]
    
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data=f"start_game_{game_id}")],
        [InlineKeyboardButton("üö™ –ó–∞–∫—Ä–∏—Ç–∏ –≥—Ä—É", callback_data=f"close_game_{game_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
‚úÖ **–ì—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üéØ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category_info['name']}
üìã **–û–ø–∏—Å:** {category_info['description']}
üÜî **ID –≥—Ä–∏:** `{game_id}`
üë§ **–ì—Ä–∞–≤—Ü—ñ:** 1 (–≤–∏)

–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è ID –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, —â–æ–± –≤—ñ–Ω –º—ñ–≥ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è:
/join {game_id}

–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≥—Ä—É" —è–∫—â–æ –≤—Å—ñ –≤–∂–µ –≥–æ—Ç–æ–≤—ñ.
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def join_game_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø–∏—Ç—É—î ID –≥—Ä–∏ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    text = """
üéÆ **–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –≥—Ä–∏**

–í–≤–µ–¥—ñ—Ç—å ID –≥—Ä–∏, —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:

–ü—Ä–∏–∫–ª–∞–¥: `/join 1234`

–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è.
"""
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –≥—Ä–∏"""
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –≥—Ä–∏: /join 1234")
        return
    
    game_id = context.args[0]
    user_id = update.effective_user.id
    
    if game_id not in games:
        await update.message.reply_text("‚ùå –ì—Ä–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    
    if user_id in game.players:
        await update.message.reply_text("‚ùå –í–∏ –≤–∂–µ –≤ —Ü—ñ–π –≥—Ä—ñ!")
        return
    
    if game.is_active:
        await update.message.reply_text("‚ùå –¶—è –≥—Ä–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
        return
    
    # –î–æ–¥–∞—î–º–æ –≥—Ä–∞–≤—Ü—è
    game.players.add(user_id)
    category_info = QUESTION_CATEGORIES[game.category]
    
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É", callback_data=f"start_game_{game_id}")],
        [InlineKeyboardButton("üö™ –í–∏–π—Ç–∏ –∑ –≥—Ä–∏", callback_data=f"leave_game_{game_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
‚úÖ **–ü—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏!**

üéØ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category_info['name']}
üÜî **ID –≥—Ä–∏:** `{game_id}`
üë• **–ì—Ä–∞–≤—Ü—ñ–≤:** {len(game.players)}

–ö–æ–ª–∏ –≤—Å—ñ –±—É–¥—É—Ç—å –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏ –≥—Ä—É".
"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞—î –≥—Ä—É —Ç–∞ –ø–æ–∫–∞–∑—É—î –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    game_id = query.data.replace("start_game_", "")
    
    if game_id not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    
    if len(game.players) < 2:
        await query.edit_message_text("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫—É!")
        return
    
    # –ê–∫—Ç–∏–≤—É—î–º–æ –≥—Ä—É
    game.is_active = True
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
    question = question_manager.get_random_question(game.category, game.used_questions)
    
    if not question:
        await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è!")
        return
    
    game.current_question = question
    game.used_questions.add(question['id'])
    
    category_info = QUESTION_CATEGORIES[game.category]
    
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f"next_question_{game_id}")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"game_stats_{game_id}")],
        [InlineKeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É", callback_data=f"end_game_{game_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üéÆ **–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è!**

üéØ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category_info['name']}
üìù **–ü–∏—Ç–∞–Ω–Ω—è #{len(game.used_questions)}:**

**{question['question']}**

üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** {question['guidance']}
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    game_id = query.data.replace("next_question_", "")
    
    if game_id not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è
    question = question_manager.get_random_question(game.category, game.used_questions)
    
    if not question:
        await query.edit_message_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è!")
        return
    
    game.current_question = question
    game.used_questions.add(question['id'])
    
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f"next_question_{game_id}")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"game_stats_{game_id}")],
        [InlineKeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É", callback_data=f"end_game_{game_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üìù **–ü–∏—Ç–∞–Ω–Ω—è #{len(game.used_questions)}:**

**{question['question']}**

üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** {question['guidance']}
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()  # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
    
    if query.data == "create_game":
        await create_game_category_selection(update, context)
    elif query.data.startswith("category_"):
        await create_game(update, context)
    elif query.data == "join_game":
        await join_game_input(update, context)
    elif query.data == "about":
        await show_about(update, context)
    elif query.data == "main_menu":
        await start(update, context)
    elif query.data.startswith("start_game_"):
        await start_game(update, context)
    elif query.data.startswith("next_question_"):
        await next_question(update, context)
    elif query.data.startswith("game_stats_"):
        await show_game_stats(update, context)
    elif query.data.startswith("end_game_"):
        await end_game(update, context)
    elif query.data.startswith("close_game_"):
        await close_game(update, context)
    elif query.data.startswith("leave_game_"):
        await leave_game(update, context)
    else:
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞!")

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞"""
    query = update.callback_query
    
    text = """
‚ÑπÔ∏è **–ü—Ä–æ –±–æ—Ç–∞**

–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä —â–æ —Ö–æ—á—É—Ç—å –∫—Ä–∞—â–µ –ø—ñ–∑–Ω–∞—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ —á–µ—Ä–µ–∑ —Ü—ñ–∫–∞–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è.

üìä **–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∏—Ç–∞–Ω—å:**
üî• **–Ü–Ω—Ç–∏–º–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è** - 100 –ø–∏—Ç–∞–Ω—å –ø—Ä–æ —Å–µ–∫—Å—É–∞–ª—å–Ω—ñ—Å—Ç—å
üåü **–ü—Ä–æ –∂–∏—Ç—Ç—è** - 100 —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫–∏—Ö –ø–∏—Ç–∞–Ω—å  
üòÖ **–¢—Ä–æ—Ö–∏ –∫—Ä—ñ–Ω–∂–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è** - 100 –∫—É–º–µ–¥–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å

üéÆ **–Ø–∫ –≥—Ä–∞—Ç–∏:**
1. –°—Ç–≤–æ—Ä—ñ—Ç—å –≥—Ä—É —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
2. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è ID –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º
3. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ —á–µ—Ä–∑—ñ
4. –í—ñ–¥–∫—Ä–∏–≤–∞–π—Ç–µ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ!

–†–æ–∑—Ä–æ–±–Ω–∏–∫: @–≤–∞—à_username
"""
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_game_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∏"""
    query = update.callback_query
    game_id = query.data.replace("game_stats_", "")
    
    if game_id not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    category_info = QUESTION_CATEGORIES[game.category]
    
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∏**

üéØ **–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {category_info['name']}
üÜî **ID –≥—Ä–∏:** `{game_id}`
üë• **–ì—Ä–∞–≤—Ü—ñ:** {len(game.players)}
üìù **–†–æ–∑–≥–ª—è–Ω—É—Ç–æ –ø–∏—Ç–∞–Ω—å:** {len(game.used_questions)}
üéÆ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∞' if game.is_active else '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è'}
"""
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥—Ä–∏", callback_data=f"start_game_{game_id}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def end_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à—É—î –≥—Ä—É"""
    query = update.callback_query
    game_id = query.data.replace("end_game_", "")
    
    if game_id not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    category_info = QUESTION_CATEGORIES[game.category]
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É
    del games[game_id]
    
    text = f"""
üèÅ **–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**

–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –í–∏ —Ä–æ–∑–≥–ª—è–Ω—É–ª–∏ **{len(game.used_questions)}** –ø–∏—Ç–∞–Ω—å –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó **{category_info['name']}**.

–°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è –≤–∏ –∫—Ä–∞—â–µ –ø—ñ–∑–Ω–∞–ª–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ! üíï
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–æ–≤–∞ –≥—Ä–∞", callback_data="create_game")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def close_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä–∏–≤–∞—î –≥—Ä—É (—Ç—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á)"""
    query = update.callback_query
    game_id = query.data.replace("close_game_", "")
    
    if game_id not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    
    if query.from_user.id != game.creator_id:
        await query.edit_message_text("‚ùå –¢—ñ–ª—å–∫–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—á –º–æ–∂–µ –∑–∞–∫—Ä–∏—Ç–∏ –≥—Ä—É!")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≥—Ä—É
    del games[game_id]
    
    text = "üö™ **–ì—Ä—É –∑–∞–∫—Ä–∏—Ç–æ!**\n\n–ì—Ä–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—á–µ–º."
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def leave_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–π—Ç–∏ –∑ –≥—Ä–∏"""
    query = update.callback_query
    game_id = query.data.replace("leave_game_", "")
    
    if game_id not in games:
        await query.edit_message_text("‚ùå –ì—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = games[game_id]
    user_id = query.from_user.id
    
    if user_id in game.players:
        game.players.remove(user_id)
    
    text = f"""
üö™ **–í–∏ –≤–∏–π—à–ª–∏ –∑ –≥—Ä–∏**

ID –≥—Ä–∏: `{game_id}`
–ì—Ä–∞–≤—Ü—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—è: {len(game.players)}
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.getenv('BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("join", join_game))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π!")
    application.run_polling()

if __name__ == '__main__':
    main()
